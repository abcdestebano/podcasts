{"version":3,"file":"static/webpack/static/development/pages/channel.js.214a2a8d22ae3e67f555.hot-update.js","sources":["webpack:///./components/PodcastPlayer.js","webpack:///./pages/channel.js"],"sourcesContent":["import React from 'react'\nimport slug from '../helpers/slug'\nimport { Link } from '../routes'\n\nconst PodcastPlayer = ({ audio_clip, onClose }) => {\n   return (\n      <div>\n         <header>Podcasts</header>\n\n         <div className='modal'>\n            <div className='clip'>\n               <nav>\n                  {onClose\n                     ? <a onClick={onClose}>&lt; Volver</a>\n                     : <Link route='channel'\n                        params={{\n                           slug: slug(audio_clip.channel.title), id: audio_clip.channel.id\n                        }}>\n                        <a>&lt; Volver</a>\n                     </Link>}\n               </nav>\n               <picture>\n                  <div style={{ backgroundImage: `url(${audio_clip.urls.image || audio_clip.channel.urls.logo_image.original})` }} />\n               </picture>\n\n               <div className='player'>\n                  <h3>{audio_clip.title}</h3>\n                  <h6>{audio_clip.channel.title}</h6>\n                  <audio controls autoPlay={true}>\n                     <source src={audio_clip.urls.high_mp3} type='audio/mpeg' />\n                  </audio>\n               </div>\n            </div>\n         </div>\n\n         <style jsx>{`\n            nav {\n               background: none;\n            }\n            nav a {\n               display: inline-block;\n               padding: 15px;\n               color: white;\n               cursor: pointer;\n               text-decoration: none;\n            }\n            .clip {\n               display: flex;\n               height: 100%;\n               flex-direction: column;\n               background: #8756ca;\n               color: white;\n            }\n            picture {\n               display: flex;\n               align-items: center;\n               justify-content: center;\n               flex: 1 1;\n               flex-direction: column;\n               width: auto;\n               padding: 10%;\n            }\n            picture div {\n               width: 100%;\n               height: 100%;\n               background-position: 50% 50%;\n               background-size: contain;\n               background-repeat: no-repeat;\n            }\n            .player {\n               padding: 30px;\n               background: rgba(0,0,0,0.3);\n               text-align: center;\n            }\n            h3 {\n               margin: 0;\n            }\n            h6 {\n               margin: 0;\n               margin-top: 1em;\n            }\n            audio {\n               margin-top: 2em;\n               width: 100%;\n            }\n            `}</style>\n\n         <style jsx global>{`\n               body {\n                  margin: 0;\n                  font-family: system-ui;\n                  background: white;\n               }\n            `}</style>\n      </div>\n   )\n}\n\nexport default PodcastPlayer\n","import React, { Component, Fragment } from 'react'\nimport Error from './_error';\n\n// COMPONENTS\nimport Layout from '../components/Layout'\nimport Banner from '../components/Banner'\nimport ChannelsGrid from '../components/ChannelsGrid'\nimport PodcastList from '../components/PodcastList';\nimport PodcastPlayer from '../components/PodcastPlayer';\n\nclass channel extends Component {\n\n   constructor(props) {\n      super(props);\n      this.state = {\n         openPodcast: null\n      }\n   }\n\n   static async getInitialProps({ query, res }) {\n      const idChannel = query.id\n      try {\n         const [requestChannel, requestChildChannels, requestAudios] = await Promise.all([\n            fetch(`http://api.audioboom.com/channels/${idChannel}`),\n            fetch(`http://api.audioboom.com/channels/${idChannel}/child_channels`),\n            fetch(`http://api.audioboom.com/channels/${idChannel}/audio_clips`)\n         ])\n\n         if (requestChannel.status >= 404) {\n            res.statusCode = requestChannel.status\n            return { channel: null, audio_clips: null, channels: null, statusCode: requestChannel.status }\n         }\n\n         const { body: { channel } } = await requestChannel.json()\n         const { body: { channels } } = await requestChildChannels.json()\n         const { body: { audio_clips } } = await requestAudios.json()\n         return { channel, audio_clips, channels, statusCode: 200 }\n      } catch (error) {\n         res.statusCode = 503\n         return { channel: null, audio_clips: null, channels: null, statusCode: 503 }\n      }\n\n   }\n\n   handleOpenPodcast = (event, podcast) => {\n      // event.preventDefault()\n      this.setState({ openPodcast: podcast })\n   }\n\n   render() {\n      const { channel, audio_clips, channels, statusCode } = this.props\n      const { openPodcast } = this.state\n      if (statusCode !== 200) {\n         return (<Error statusCode={statusCode} />)\n      }\n      return (\n         <Layout title=\"Podcasts\">\n            <Banner\n               banner={channel.urls.banner_image.original}\n               title={channel.title} />\n            {openPodcast && <div className=\"modal\">\n               <PodcastPlayer audio_clip={openPodcast} />\n            </div>}\n            <div className=\"content\">\n               <PodcastList audios={audio_clips} onClickPodcast={this.handleOpenPodcast} />\n               <div className=\"series\">\n                  {channels.length > 0 && <h2>Series</h2>}\n                  <ChannelsGrid channels={channels} elements=\"channels\" />\n               </div>\n            </div>\n            <style jsx>{`\n               .content {\n                  display: grid;\n                  grid-template-columns: 2fr 1fr;\n               }\n               @media only screen and (max-width: 600px) {\n                  .content {\n                     grid-template-columns: 1fr;\n                  }\n               } \n               .modal {\n                  position: fixed;\n                  top: 0;\n                  left: 0;\n                  right: 0;\n                  bottom: 0;\n                  z-index: 99999;\n               }\n            `}</style>\n         </Layout>\n      )\n   }\n}\n\nexport default channel"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AADA;AADA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0FA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiCA;AACA;AAAA;AAAA;AACA;AACA;AAlCA;AACA;AADA;AAFA;AAKA;AACA;;;AA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAXA;AAAA;AAAA;AAmCA;;;;;;;;;;;;;AAxEA;AACA;;;AAEA;AACA;;;;AADA;AAAA;AAAA;AACA;AAKA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;;;AADA;;AACA;AACA;;;AADA;;AACA;AACA;;;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AA9BA;AACA;AAmFA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}